<?php
/**
 * @link      https://github.com/monarc-project for the canonical source repository
 * @copyright Copyright (c) 2016-2020 SMILE GIE Securitymadein.lu - Licensed under GNU Affero GPL v3
 * @license   MONARC is licensed under GNU Affero General Public License version 3
 */

namespace Monarc\Core\Service;

use Monarc\Core\Model\Entity\Vulnerability;
use Monarc\Core\Model\Table\AnrTable;
use Monarc\Core\Model\Table\VulnerabilityTable;

/**
 * Vulnerability Service
 *
 * Class VulnerabilityService
 * @package Monarc\Core\Service
 */
class VulnerabilityService extends AbstractService
{
    protected $anrTable;
    protected $modelTable;
    protected $modelService;
    protected $amvService;
    protected $dependencies = ['anr', 'model[s]()'];
    protected $forbiddenFields = ['anr'];
    protected $filterColumns = [
        'label1', 'label2', 'label3', 'label4',
        'description1', 'description2', 'description3', 'description4',
        'code', 'status',
    ];

    public function create($data, $last = true)
    {
        /** @var VulnerabilityTable $vulnerabilityTable */
        $vulnerabilityTable = $this->get('table');
        $entityClass = $vulnerabilityTable->getEntityClass();

        /** @var Vulnerability $vulnerability */
        $vulnerability = new $entityClass();
        $vulnerability->setLanguage($this->getLanguage());
        $vulnerability->setDbAdapter($vulnerabilityTable->getDb());

        if (!empty($data['anr'])) {
            /** @var AnrTable $anrTable */
            $anrTable = $this->get('anrTable');
            $anr = $anrTable->findById($data['anr']);

            $vulnerability->setAnr($anr);
        }

        $vulnerability->exchangeArray($data);
        $this->setDependencies($vulnerability, $this->dependencies);

        $vulnerability->setCreator(
            $this->getConnectedUser()->getFirstname() . ' ' . $this->getConnectedUser()->getLastname()
        );

        return $vulnerabilityTable->save($vulnerability, $last);
    }

    /**
     * @inheritdoc
     */
    public function update($id, $data)
    {
        $this->filterPatchFields($data);

        /** @var Vulnerability $vulnerability */
        $vulnerability = $this->get('table')->getEntity($id);
        $vulnerability->setDbAdapter($this->get('table')->getDb());
        $vulnerability->setLanguage($this->getLanguage());

        if (($vulnerability->mode == Vulnerability::MODE_SPECIFIC) && ($data['mode'] == Vulnerability::MODE_GENERIC)) {
            //delete models
            unset($data['models']);
        }

        $models = $data['models'] ?? [];
        $follow = $data['follow'] ?? null;
        unset($data['models'], $data['follow']);

        $vulnerability->exchangeArray($data);
        if ($vulnerability->get('models')) {
            $vulnerability->get('models')->initialize();
        }

        if (!$this->get('amvService')->checkAMVIntegrityLevel($models, null, null, $vulnerability, $follow)) {
            throw new \Monarc\Core\Exception\Exception('Integrity AMV links violation', 412);
        }

        if (($follow) && (!$this->get('amvService')->ensureAssetsIntegrityIfEnforced($models, null, null, $vulnerability))) {
            throw new \Monarc\Core\Exception\Exception('Assets Integrity', 412);
        }

        switch ($vulnerability->get('mode')) {
            case Vulnerability::MODE_SPECIFIC:
                if (empty($models)) {
                    $vulnerability->set('models', []);
                } else {
                    $modelsObj = [];
                    foreach ($models as $mid) {
                        $modelsObj[] = $this->get('modelTable')->getEntity($mid);
                    }
                    $vulnerability->set('models', $modelsObj);
                }
                if ($follow) {
                    $this->get('amvService')->enforceAMVtoFollow($vulnerability->get('models'), null, null, $vulnerability);
                }
                break;
            case Vulnerability::MODE_GENERIC:
                $vulnerability->set('models', []);
                break;
        }

        $vulnerability->setUpdater(
            $this->getConnectedUser()->getFirstname() . ' ' . $this->getConnectedUser()->getLastname()
        );

        return $this->get('table')->save($vulnerability);
    }

    /**
     * @inheritdoc
     */
    public function patch($id, $data)
    {
        //security
        $this->filterPatchFields($data);

        parent::patch($id, $data);
    }
}
