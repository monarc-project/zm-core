<?php declare(strict_types=1);
/**
 * @link      https://github.com/monarc-project for the canonical source repository
 * @copyright Copyright (c) 2016-2020 SMILE GIE Securitymadein.lu - Licensed under GNU Affero GPL v3
 * @license   MONARC is licensed under GNU Affero General Public License version 3
 */

namespace Monarc\Core\Service;

use Monarc\Core\Exception\Exception;
use Monarc\Core\Model\Entity\Model;
use Monarc\Core\Model\Entity\Vulnerability;
use Monarc\Core\Model\Table\AnrTable;
use Monarc\Core\Table\ModelTable;
use Monarc\Core\Service\Traits\QueryParamsFormatterTrait;
use Monarc\Core\Table\VulnerabilityTable;

class VulnerabilityService
{
    use QueryParamsFormatterTrait;

    protected static array $searchFields = [
        'label1',
        'label2',
        'label3',
        'label4',
        'description1',
        'description2',
        'description3',
        'description4',
        'code',
    ];

    protected VulnerabilityTable $vulnerabilityTable;

    protected AnrTable $anrTable;

    protected ModelTable $modelTable;

    private ConnectedUserService $connectedUserService;

    protected AmvService $amvService;

    public function __construct(
        VulnerabilityTable $vulnerabilityTable,
        AnrTable $anrTable,
        ModelTable $modelTable,
        AmvService $amvService,
        ConnectedUserService $connectedUserService
    ) {
        $this->vulnerabilityTable = $vulnerabilityTable;
        $this->anrTable = $anrTable;
        $this->modelTable = $modelTable;
        $this->amvService = $amvService;
        $this->connectedUserService = $connectedUserService;
    }

    public function getList(string $searchString, array $filter, string $orderField): array
    {
        $result = [];

        $params = $this->getFormattedFilterParams($searchString, $filter);
        $order = $this->getFormattedOrder($orderField);

        /** @var Vulnerability[] $vulnerabilities */
        $vulnerabilities = $this->vulnerabilityTable->findByParams($params, $order);
        foreach ($vulnerabilities as $vulnerability) {
            $result[] = $this->prepareVulnerabilityDataResult($vulnerability);
        }

        return $result;
    }

    public function getVulnerabilityData(string $uuid): array
    {
        $vulnerability = $this->vulnerabilityTable->findByUuid($uuid);

        return $this->prepareVulnerabilityDataResult($vulnerability);
    }

    public function create(array $data, bool $saveInDb = true): Vulnerability
    {
        $vulnerability = (new Vulnerability())
            ->setCode($data['code'])
            ->setLabels($data)
            ->setDescriptions($data)
            ->setCreator($this->connectedUserService->getConnectedUser()->getEmail());
        if (isset($data['mode'])) {
            $vulnerability->setMode($data['mode']);
        }
        if (!empty($data['models'])) {
            /** @var Model[] $models */
            $models = $this->modelTable->findByIds($data['models']);
            foreach ($models as $model) {
                $vulnerability->addModel($model);
            }
        }

        $this->vulnerabilityTable->save($vulnerability, $saveInDb);

        return $vulnerability;
    }

    public function update(string $uuid, array $data): void
    {
        $vulnerability = $this->vulnerabilityTable->findByUuid($uuid);

        if ($data['mode'] === Vulnerability::MODE_GENERIC && $vulnerability->isModeSpecific()) {
            unset($data['models']);
        }

        $vulnerability->setCode($data['code'])
            ->setLabels($data)
            ->setDescriptions($data)
            ->setMode($data['mode'] ?? 0)
            ->setStatus($data['status'] ?? 1)
            ->setUpdater($this->connectedUserService->getConnectedUser()->getEmail());

        $follow = $data['follow'] ?? null;
        $modelsIds = $data['models'] ?? [];

        if (!$this->amvService->checkAmvIntegrityLevel($modelsIds, null, null, $vulnerability, $follow)) {
            throw new Exception('Integrity AMV links violation', 412);
        }

        if ($follow && !$this->amvService->ensureAssetsIntegrityIfEnforced($modelsIds, null, null, $vulnerability)) {
            throw new Exception('Assets Integrity', 412);
        }

        $vulnerability->unlinkModels();
        if ($vulnerability->isModeSpecific()) {
            if (!empty($modelsIds)) {
                $models = $this->modelTable->findByIds($modelsIds);
                foreach ($models as $model) {
                    $vulnerability->addModel($model);
                }
            }
            if ($follow) {
                $this->amvService->enforceAmvToFollow($vulnerability->getModels(), null, null, $vulnerability);
            }
        }

        $this->vulnerabilityTable->save($vulnerability);
    }

    public function patch(string $uuid, array $data): void
    {
        $vulnerability = $this->vulnerabilityTable->findByUuid($uuid);

        $vulnerability->setStatus((int)$data['status'])
            ->setUpdater($this->connectedUserService->getConnectedUser()->getEmail());

        $this->vulnerabilityTable->save($vulnerability);
    }

    public function delete(string $uuid): void
    {
        $vulnerability = $this->vulnerabilityTable->findByUuid($uuid);

        $this->vulnerabilityTable->remove($vulnerability);
    }

    public function deleteList(array $data): void
    {
        $vulnerabilities = $this->vulnerabilityTable->findByUuids($data);

        $this->vulnerabilityTable->removeList($vulnerabilities);
    }

    protected function prepareVulnerabilityDataResult(Vulnerability $vulnerability): array
    {
        $models = [];
        foreach ($vulnerability->getModels() as $model) {
            $models[] = [
                'label1' => $model->getLabel(1),
                'label2' => $model->getLabel(2),
                'label3' => $model->getLabel(3),
                'label4' => $model->getLabel(4),
            ];
        }

        return [
            'uuid' => $vulnerability->getUuid(),
            'code' => $vulnerability->getCode(),
            'label1' => $vulnerability->getLabel(1),
            'label2' => $vulnerability->getLabel(2),
            'label3' => $vulnerability->getLabel(3),
            'label4' => $vulnerability->getLabel(4),
            'description1' => $vulnerability->getDescription(1),
            'description2' => $vulnerability->getDescription(2),
            'description3' => $vulnerability->getDescription(3),
            'description4' => $vulnerability->getDescription(4),
            'status' => $vulnerability->getStatus(),
            'mode' => $vulnerability->getMode(),
            'models' => $models,
        ];
    }
}
