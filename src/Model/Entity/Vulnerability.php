<?php declare(strict_types=1);
/**
 * @link      https://github.com/monarc-project for the canonical source repository
 * @copyright Copyright (c) 2016-2022 SMILE GIE Securitymadein.lu - Licensed under GNU Affero GPL v3
 * @license   MONARC is licensed under GNU Affero General Public License version 3
 */

namespace Monarc\Core\Model\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Table(name="vulnerabilities", indexes={
 *      @ORM\Index(name="anr", columns={"anr_id"})
 * })
 * @ORM\Entity
 */
class Vulnerability extends VulnerabilitySuperClass
{
    /**
     * @var Model[]|ArrayCollection
     *
     * @ORM\ManyToMany(targetEntity="Model", cascade={"persist"})
     * @ORM\JoinTable(name="vulnerabilities_models",
     *  joinColumns={@ORM\JoinColumn(name="vulnerability_id", referencedColumnName="uuid")},
     *  inverseJoinColumns={@ORM\JoinColumn(name="model_id", referencedColumnName="id")}
     * )
     */
    protected $models;

    public function __construct()
    {
        $this->models = new ArrayCollection();
    }

    /**
     * @return Model[]
     */
    public function getModels()
    {
        return $this->models;
    }

    public function addModel(Model $model): self
    {
        $this->models->add($model);
        if (!$this->models->contains($model)) {
            $this->models->add($model);

            $model->addVulnerability($this);
        }

        return $this;
    }
}
